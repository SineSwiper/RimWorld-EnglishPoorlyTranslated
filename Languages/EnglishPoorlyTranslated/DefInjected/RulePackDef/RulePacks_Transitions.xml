<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  <!-- EN:
    <li>die(p=2)->die</li>
    <li>die->perish</li>
    <li>die->expire</li>
    <li>die(subject_flesh!=Mechanoid,p=0.5)->give in to [SUBJECT_possessive] wounds</li>
    <li>die(subject_flesh==Mechanoid,p=0.5)->shut down</li>
    <li>die(subject_flesh==Mechanoid,p=0.5)->stop functioning</li>
    <li>died(p=2)->died</li>
    <li>died->perished</li>
    <li>died(subject_flesh!=Mechanoid)->expired</li>
    <li>died(subject_flesh==Mechanoid)->shut down</li>
    <li>died(subject_flesh==Mechanoid)->stopped functioning</li>
  -->
  <Transition_Died.rulePack.rulesStrings>
    <li>die(p=2)->death</li>
    <li>die->die</li>
    <li>die->death</li>
    <li>A (! = subject_flesh metshanoid, p = 0.5) -> damage [SUBJECT_possessive]</li>
    <li>and (subject_flesh Mechanoid == P = 0.5) -> close</li>
    <li>(subject_flesh Mechanoid == p = 0.5) -> stopped</li>
    <li>died(p=2)->death</li>
    <li>died->He had a wound</li>
    <li>Death (= subject_flesh Mechanoid m) -></li>
    <li>died(subject_flesh==Mechanoid)->closed</li>
    <li>died(subject_flesh==Mechanoid)->necessary</li>
  </Transition_Died.rulePack.rulesStrings>
  <!-- EN:
    <li>die(p=3)->explode [flavor]</li>
    <li>die(p=3)->explode [flavorsuffix]</li>
    <li>die->detonate [flavor]</li>
    <li>die->detonate [flavorsuffix]</li>
    <li>die->burst [flavor]</li>
    <li>die->burst [flavorsuffix]</li>
    <li>died(p=3)->exploded [flavor]</li>
    <li>died->detonated [flavor]</li>
    <li>died->burst [flavor]</li>
    <li>flavor(p=0.2)->in a chemical [fireball]</li>
    <li>flavor->in a [Color] [fireball]</li>
    <li>flavor->in a [AdjectiveLarge] [fireball]</li>
    <li>flavor(p=4)->in a [fireball]</li>
    <li>flavor(p=4)-></li>
    <li>flavorsuffix->, scattering [pieces] [everywhere]</li>
    <li>flavorsuffix(subject_flesh!=Mechanoid,p=2)->, scattering [Gore] [everywhere]</li>
    <li>flavorsuffix(subject_flesh!=Mechanoid)->, leaving a small pile of [Gore]</li>
    <li>flavorsuffix->, leaving a small crater</li>
    <li>flavorsuffix(p=4)-></li>
    <li>fireball(p=3)->fireball</li>
    <li>fireball->flameball</li>
    <li>fireball->shockwave</li>
    <li>fireball->conflagration</li>
    <li>pieces->pieces</li>
    <li>pieces->fragments</li>
    <li>everywhere->everywhere</li>
    <li>everywhere->far and wide</li>
  -->
  <Transition_DiedExplosive.rulePack.rulesStrings>
    <li>die(p=3)->[flavor] bearings exploded</li>
    <li>die(p=3)->explodieren[flavorsuffix]</li>
    <li>die->[flavor] explosion</li>
    <li>die->explodieren[flavorsuffix]</li>
    <li>die->[flavor] explosion</li>
    <li>die->zerbersten[flavorsuffix]</li>
    <li>died(p=3)->[flavor]</li>
    <li>died->explosion [flavor]</li>
    <li>died->brook [flavor]</li>
    <li>flavor(p=0.2)->[fireball] and chemicals</li>
    <li>flavor->[Color] [fireball]</li>
    <li>flavor->In [AdjectiveLarge] [fireball]</li>
    <li>flavor(p=4)->[fireball]</li>
    <li>flavor(p=4)-></li>
    <li>flavorsuffix->distributed [everywhere] [pieces]</li>
    <li>flavorsuffix (= subject_flesh Mechanoid, p = 2!) -> and distributed [everywhere] [Gore]</li>
    <li>flavorsuffix (subject_flesh = Mechanoid!) -> [Gore] just a small group</li>
    <li>flavorsuffix->He left a small crater</li>
    <li>flavorsuffix(p=4)-></li>
    <li>fireball(p=3)->Fireball</li>
    <li>fireball->Fireball</li>
    <li>fireball->Bolts</li>
    <li>fireball->Firestorm</li>
    <li>pieces->Cautious</li>
    <li>pieces->Component</li>
    <li>everywhere->all settlements</li>
    <li>everywhere->and</li>
  </Transition_DiedExplosive.rulePack.rulesStrings>
  <!-- EN:
    <li>r_logentry(p=1.5)->[CULPRITHEDIFF_labelNoun] caused [SUBJECT_definite] to [die].</li>
    <li>r_logentry(p=1.5)->[CULPRITHEDIFF_labelNounPretty] caused [SUBJECT_definite] to [die].</li>
    <li>r_logentry->[SUBJECT_definite] [died] [duetoa] [CULPRITHEDIFF_labelNoun] [flavorsuffix].</li>
    <li>r_logentry->[SUBJECT_definite] [died] [duetoa] [CULPRITHEDIFF_labelNounPretty] [flavorsuffix].</li>
    <li>r_logentry->[SUBJECT_definite] [died].</li>
    <li>r_logentry->[SUBJECT_definite] [died] [flavorsuffix].</li>
  -->
  <Transition_DiedInclude.rulePack.rulesStrings>
    <li>r_logentry(p=1.5)->Let [SUBJECT_label] [die] [CULPRITHEDIFF_labelNoun].</li>
    <li>r_logentry(p=1.5)->[CULPRITHEDIFF_labelNounPretty] allow [SUBJECT_label] [die].</li>
    <li>r_logentry->[SUBJECT_label] [died] [duetoa] [CULPRITHEDIFF_labelNoun] [flavorsuffix].</li>
    <li>r_logentry->[SUBJECT_label] [died] [duetoa] [CULPRITHEDIFF_labelNounPretty] [flavorsuffix].</li>
    <li>r_logentry->[SUBJECT_label] [died].</li>
    <li>r_logentry->[SUBJECT_label] [died][flavorsuffix].</li>
  </Transition_DiedInclude.rulePack.rulesStrings>
  <!-- EN:
    <li>r_logentry->[CULPRITHEDIFF_labelNoun] caused [SUBJECT_definite] to [collapsemeta].</li>
    <li>r_logentry->[CULPRITHEDIFF_labelNounPretty] caused [SUBJECT_definite] to [collapsemeta].</li>
    <li>r_logentry->[SUBJECT_definite] [collapsedmeta] [duetoa] [CULPRITHEDIFF_labelNoun].</li>
    <li>r_logentry->[SUBJECT_definite] [collapsedmeta] [duetoa] [CULPRITHEDIFF_labelNounPretty].</li>
    <li>r_logentry(p=0.1)->[SUBJECT_definite] [collapsedmeta].</li>
    <li>collapse->collapse</li>
    <li>collapse->crumple</li>
    <li>collapse->drop</li>
    <li>collapse(subject_flesh!=Mechanoid)->faint</li>
    <li>collapse(subject_flesh==Mechanoid)->crash</li>
    <li>collapse(subject_flesh==Mechanoid)->bootloop</li>
    <li>collapse(subject_flesh==Mechanoid)->hardlock</li>
    <li>collapsed->collapsed</li>
    <li>collapsed->crumpled</li>
    <li>collapsed->dropped</li>
    <li>collapsed(subject_flesh!=Mechanoid)->fainted</li>
    <li>collapsed(subject_flesh==Mechanoid)->crashed</li>
    <li>collapsed(subject_flesh==Mechanoid)->bootlooped</li>
    <li>collapsed(subject_flesh==Mechanoid)->hardlocked</li>
    <li>helplessly->helplessly</li>
    <li>helplessly(subject_flesh!=Mechanoid)->unconscious</li>
    <li>helplessly(subject_flesh!=Mechanoid)->in exhaustion</li>
    <li>helplessly(subject_flesh!=Mechanoid)->weakly</li>
    <li>helplessly(subject_flesh!=Mechanoid)->feebly</li>
    <li>helplessly(subject_flesh==Mechanoid)->uncontrollably</li>
    <li>collapsemeta->[collapse]</li>
    <li>collapsemeta(p=0.5)->[collapse] [helplessly]</li>
    <li>collapsedmeta->[collapsed]</li>
    <li>collapsedmeta(p=0.5)->[collapsed] [helplessly]</li>
  -->
  <Transition_Downed.rulePack.rulesStrings>
    <li>r_logentry->Make [CULPRITHEDIFF_labelNoun] [SUBJECT_label] [collapsemeta].</li>
    <li>r_logentry->I then [CULPRITHEDIFF_labelNounPretty] [SUBJECT_label] [collapsemeta].</li>
    <li>r_logentry->[SUBJECT_label] [collapsedmeta] [duetoa] [CULPRITHEDIFF_labelNoun].</li>
    <li>r_logentry->[SUBJECT_label] [collapsedmeta] [duetoa] [CULPRITHEDIFF_labelNounPretty].</li>
    <li>r_logentry(p=0.1)->[SUBJECT_label] [collapsedmeta].</li>
    <li>collapse->crash</li>
    <li>collapse->list</li>
    <li>collapse->unless</li>
    <li>Collapse (subject_flesh = Mechanoid!) -> weakness</li>
    <li>collapse(subject_flesh==Mechanoid)->Dealing with disasters</li>
    <li>collapse(subject_flesh==Mechanoid)->She was stuck in a loop</li>
    <li>collapse(subject_flesh==Mechanoid)->Errors memory dies</li>
    <li>collapsed->challenge</li>
    <li>collapsed->weak</li>
    <li>collapsed->all</li>
    <li>crushed ice (= subject_flesh Mechanoid) -> Toran</li>
    <li>collapsed(subject_flesh==Mechanoid)->system damage pain</li>
    <li>collapsed(subject_flesh==Mechanoid)->Stuck in loop reboot</li>
    <li>collapsed(subject_flesh==Mechanoid)->Head error remember</li>
    <li>helplessly->helpless</li>
    <li>helpless (! subject_flesh = mechanoid) -> unconscious</li>
    <li>Despair (subject_flesh = Mechanoid!) -> more</li>
    <li>Inevitably (subject_flesh = Mechanoid) -> O</li>
    <li>Helpless (subject_flesh = Mechanoid!) -> sick</li>
    <li>helplessly(subject_flesh==Mechanoid)->countless</li>
    <li>collapsemeta->[collapse]</li>
    <li>collapsemeta(p=0.5)->[helplessly] [collapse]</li>
    <li>collapsedmeta->i [collapsed]</li>
    <li>collapsedmeta(p=0.5)->[helplessly] is [collapsed]</li>
  </Transition_Downed.rulePack.rulesStrings>
  <!-- EN:
    <li>duetoa->due to</li>
    <li>duetoa(p=0.5)->because of</li>
    <li>duetoa(p=0.5)->thanks to</li>
  -->
  <Transition_Include.rulePack.rulesStrings>
    <li>duetoa->because</li>
    <li>duetoa(p=0.5)->because</li>
    <li>duetoa(p=0.5)->for</li>
  </Transition_Include.rulePack.rulesStrings>
</LanguageData>
