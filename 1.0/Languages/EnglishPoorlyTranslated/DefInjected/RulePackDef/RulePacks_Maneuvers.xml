<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  <!-- EN:
    <li>damaged_inf->bite</li>
    <li>damaged_inf->chomp</li>
    <li>damaged_inf(p=0.5)->nip</li>
    <li>damaged_past->bit</li>
    <li>damaged_past->chomped</li>
    <li>damaged_past->nipped</li>
    <li>damaged_past->gnawed</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_present->biting</li>
    <li>damaged_present->chomping</li>
    <li>damaged_present->nipped</li>
    <li>damaged_present->gnawing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->leaving grisly tears in the metal</li>
    <li>destroyed_past->devoured</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_past->ravaged</li>
    <li>destroyed_present->devouring</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->ripping</li>
    <li>destroyed_present->ravaging</li>
    <li>destroyed_suffix->[to] shreds</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
  -->
  <Maneuver_Bite.rulePack.rulesStrings>
    <li>damaged_inf->eat</li>
    <li>damaged_inf->chewing</li>
    <li>damaged_inf(p=0.5)->potholes may develop</li>
    <li>damaged_past->bite</li>
    <li>damaged_past->feeding</li>
    <li>damaged_past->update</li>
    <li>damaged_past->gnawed</li>
    <li>damaged_past(deflected!=True)->crack</li>
    <li>damaged_present->munchies</li>
    <li>damaged_present->refreshes</li>
    <li>damaged_present->agreement</li>
    <li>damaged_present->chew</li>
    <li>damaged_present(deflected!=True)->rip</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->And freedom is highlighted flesh</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->Lo and free car kits</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->Skin and allow brutal repression</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->Metal sheets and cracks in the stomach</li>
    <li>destroyed_past->swallow</li>
    <li>destroyed_past->bathrobe</li>
    <li>destroyed_past->rips</li>
    <li>destroyed_past->to spend</li>
    <li>destroyed_present->moments</li>
    <li>destroyed_present->divisibility</li>
    <li>destroyed_present->divided</li>
    <li>destroyed_present->ruins</li>
    <li>destroyed_suffix->Scrap [to]</li>
    <!-- How's his wife holding up? -->
    <li>destroyed_suffix->[to] piece</li>
    <li>destroyed_suffix->group [to]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->meaningless [to]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->The dough [to]</li>
  </Maneuver_Bite.rulePack.rulesStrings>
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] dodged out of the way.</li>
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] blocked it.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
    <li>r_logentry->[RECIPIENT_label]'s [INITIATOR_label] [TOOL_label] and a lot of effort, but how [RECIPIENT_label] spread.</li>
    <li>r_logentry->[INITIATOR_label] trying to play santa but [TOOL_label] [RECIPIENT_label]'s block [RECIPIENT_label].</li>
  </Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] kicked [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] kicked a spray of [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
    <li>r_logentry->[TOOL_label] [RECIPIENT_label]'s first play [INITIATOR_label].</li>
    <li>r_logentry(p=0.2)->[INITIATOR_label] persecution in [TOOL_label] [RECIPIENT_label]'s eyes.</li>
  </Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but missed.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_label] [TOOL_label] try to cast into [RECIPIENT_label]'s but lost.</li>
  </Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
  <!-- EN:
    <li>damaged_inf(p=2)->poke</li>
    <li>damaged_inf(p=2)->jab</li>
    <li>damaged_inf->prod</li>
    <li>damaged_inf->shove</li>
    <li>damaged_inf->stab</li>
    <li>damaged_past(p=2)->poked</li>
    <li>damaged_past(p=2)->jabbed</li>
    <li>damaged_past->prodded</li>
    <li>damaged_past->shoved</li>
    <li>damaged_past->stabbed</li>
    <li>damaged_present(p=2)->poking</li>
    <li>damaged_present(p=2)->jabbing</li>
    <li>damaged_present->prodding</li>
    <li>damaged_present->shoving</li>
    <li>damaged_present->stabbing</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Poke.rulePack.rulesStrings>
    <li>damaged_inf(p=2)->press</li>
    <li>damaged_inf(p=2)->spend</li>
    <li>damaged_inf->press</li>
    <li>damaged_inf->press</li>
    <li>damaged_inf->the sting</li>
    <li>damaged_past(p=2)->story</li>
    <li>damaged_past(p=2)->knife</li>
    <li>damaged_past->push</li>
    <li>damaged_past->bush</li>
    <li>damaged_past->scimitar</li>
    <li>damaged_present(p=2)->contests</li>
    <li>damaged_present(p=2)->comment</li>
    <li>damaged_present->fall</li>
    <li>damaged_present->push</li>
    <li>damaged_present->stands</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->great ERUCT</li>
    <li>flavortext_consequence->Leaving clear the area of disability</li>
    <li>flavortext_consequence->And put it out of balance [RECIPIENT_objective]</li>
    <li>flavortext_consequence->A [RECIPIENT_objective] mothballed</li>
    <li>destroyed_past->chips</li>
    <li>destroyed_past->love</li>
    <li>destroyed_past->kill</li>
    <li>destroyed_past->screw</li>
    <li>destroyed_past->excesses</li>
    <li>destroyed_present->beyond</li>
    <li>destroyed_present->crushed</li>
    <li>destroyed_present->destruction</li>
    <li>destroyed_present->eliminate</li>
    <li>destroyed_present->resolutions</li>
    <li>destroyed_suffix->[to] items</li>
    <li>destroyed_suffix->[to] small parts</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->Good dust [to]</li>
    <li>destroyed_suffix->[to] sombina</li>
  </Maneuver_Poke.rulePack.rulesStrings>
  <!-- EN:
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
    <li>flavortext_situation->with fluids dripping from the [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->and exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and leaving a gory [woundname]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy pieces</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] fragments</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a pile of gore</li>
  -->
  <Maneuver_Scratch.rulePack.rulesStrings>
    <li>woundname->And the wounded</li>
    <li>woundname(p=0.3)->Opening</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->[woundname] bleeding</li>
    <li>flavortext_situation->And sweat [woundname] A</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->I meat free exhibition</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->And placed next to free devices</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaves [woundname] bleeding</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] blood background</li>
    <li>destroyed_suffix->Bar [to]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->piece [to]</li>
    <li>destroyed_suffix->[to] piece</li>
    <li>destroyed_suffix->parts [to]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to]</li>
  </Maneuver_Scratch.rulePack.rulesStrings>
  <!-- EN:
    <li>damaged_inf(p=4)->scratch</li>
    <li>damaged_inf(deflected!=True)->lacerate</li>
    <li>damaged_inf(deflected!=True)->tear</li>
    <li>damaged_inf->cut</li>
    <li>damaged_past(p=4)->scratched</li>
    <li>damaged_past(deflected!=True)->lacerated</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_past->cut</li>
    <li>damaged_present->scratching</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present->cutting</li>
    <li>destroyed_past->mauled</li>
    <li>destroyed_past->lacerated</li>
    <li>destroyed_past->tore off</li>
    <li>destroyed_past->shredded</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_present->mauling</li>
    <li>destroyed_present->lacerating</li>
    <li>destroyed_present->tearing off</li>
    <li>destroyed_present->shredding</li>
    <li>destroyed_present->ripping</li>
  -->
  <Maneuver_Scratch_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->ill</li>
    <li>damaged_inf(deflected!=True)->wound</li>
    <li>damaged_inf(deflected!=True)->ted</li>
    <li>damaged_inf->cut</li>
    <li>damaged_past(p=4)->scratch</li>
    <li>damaged_past(deflected!=True)->cut</li>
    <li>damaged_past(deflected!=True)->cooking time</li>
    <li>damaged_past->heat</li>
    <li>damaged_present->at first</li>
    <li>damaged_present(deflected!=True)->tears</li>
    <li>damaged_present(deflected!=True)->tears</li>
    <li>damaged_present->tent</li>
    <li>destroyed_past->arm</li>
    <li>destroyed_past->the division of</li>
    <li>destroyed_past->tear</li>
    <li>destroyed_past->laserated</li>
    <li>destroyed_past->demolition</li>
    <li>destroyed_present->surgery</li>
    <li>destroyed_present->tori</li>
    <li>destroyed_present->he chopped</li>
    <li>destroyed_present->shredded</li>
    <li>destroyed_present->slit</li>
  </Maneuver_Scratch_Damage.rulePack.rulesStrings>
  <!-- EN:
    <li>damaged_inf(p=4)->slash</li>
    <li>damaged_inf->cut</li>
    <li>damaged_inf->chop</li>
    <li>damaged_inf->hack</li>
    <li>damaged_inf->slice</li>
    <li>damaged_inf(deflected!=True)->gash</li>
    <li>damaged_past(p=4)->slashed</li>
    <li>damaged_past->cut</li>
    <li>damaged_past->chopped</li>
    <li>damaged_past->hacked</li>
    <li>damaged_past->sliced</li>
    <li>damaged_past(deflected!=True)->gashed</li>
    <li>damaged_present->slashing</li>
    <li>damaged_present->cutting</li>
    <li>damaged_present->slicing</li>
    <li>damaged_present(deflected!=True)->gashing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
    <li>flavortext_situation->with fluids dripping from the [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a gory [woundname]</li>
    <li>destroyed_past->bisected</li>
    <li>destroyed_past->divided</li>
    <li>destroyed_past->halved</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->split</li>
    <li>destroyed_present->bisecting</li>
    <li>destroyed_present->dividing</li>
    <li>destroyed_present->halving</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->splitting</li>
    <li>destroyed_suffix->into neat pieces</li>
    <li>destroyed_suffix->cleanly</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
  -->
  <Maneuver_Slash.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->slots</li>
    <li>damaged_inf->several</li>
    <li>damaged_inf->holiday</li>
    <li>damaged_inf->hack</li>
    <li>damaged_inf->shear</li>
    <li>damaged_inf(deflected!=True)->cleave</li>
    <li>damaged_past(p=4)->the game</li>
    <li>damaged_past->and</li>
    <li>damaged_past->divided</li>
    <li>damaged_past->shred</li>
    <li>damaged_past->content</li>
    <li>damaged_past(deflected!=True)->department</li>
    <li>damaged_present->bars</li>
    <li>damaged_present->loss</li>
    <li>damaged_present->skins</li>
    <li>damaged_present(deflected!=True)->edge</li>
    <li>damaged_present(deflected!=True)->loss</li>
    <li>damaged_present(deflected!=True)->classes</li>
    <li>woundname->Samad</li>
    <li>woundname(p=0.3)->Opportunities</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->[woundname] bleeding</li>
    <li>flavortext_situation->In the liquid [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->free tissue and exposing the core</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->The road to freedom and administration</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->what remains of the vast [woundname]</li>
    <li>destroyed_past->half</li>
    <li>destroyed_past->divisible</li>
    <li>destroyed_past->half</li>
    <li>destroyed_past->second</li>
    <li>destroyed_past->open</li>
    <li>destroyed_present->half of</li>
    <li>destroyed_present->complex</li>
    <li>destroyed_present->half</li>
    <li>destroyed_present->different</li>
    <li>destroyed_present->opens</li>
    <li>destroyed_suffix->New parts</li>
    <li>destroyed_suffix->clean</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->Intern for health</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->building</li>
  </Maneuver_Slash.rulePack.rulesStrings>
  <!-- EN:
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Smash.rulePack.rulesStrings>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->significant injury</li>
    <li>flavortext_consequence->Leave the clearly inaccurate</li>
    <li>flavortext_consequence->[RECIPIENT_objective] and balance</li>
    <li>flavortext_consequence->[RECIPIENT_objective] and dumped on the side</li>
    <li>destroyed_suffix->part [to]</li>
    <li>destroyed_suffix->Little [to]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to]</li>
    <li>destroyed_suffix->[to]</li>
  </Maneuver_Smash.rulePack.rulesStrings>
  <!-- EN:
    <li>damaged_inf(p=4)->smash</li>
    <li>damaged_inf->bash</li>
    <li>damaged_inf->clobber</li>
    <li>damaged_inf->slam</li>
    <li>damaged_inf->strike</li>
    <li>damaged_past(p=4)->smashed</li>
    <li>damaged_past->bashed</li>
    <li>damaged_past->clobbered</li>
    <li>damaged_past->slammed</li>
    <li>damaged_past->struck</li>
    <li>damaged_present->smashing</li>
    <li>damaged_present->bashing</li>
    <li>damaged_present->clobbering</li>
    <li>damaged_present(deflected!=True)->bruising</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
  -->
  <Maneuver_Smash_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->pulse</li>
    <li>damaged_inf->dough</li>
    <li>damaged_inf->vibrator</li>
    <li>damaged_inf->conglomeration</li>
    <li>damaged_inf->meeting</li>
    <li>damaged_past(p=4)->beat</li>
    <li>damaged_past->winners attacks</li>
    <li>damaged_past->beat</li>
    <li>damaged_past->crushed</li>
    <li>damaged_past->like</li>
    <li>damaged_present->beat</li>
    <li>damaged_present->smashed</li>
    <li>damaged_present->tap</li>
    <li>damaged_present(deflected!=True)->crushed</li>
    <li>damaged_present(deflected!=True)->and</li>
    <li>destroyed_past->breaking</li>
    <li>destroyed_past->hit</li>
    <li>destroyed_past->destruction</li>
    <li>destroyed_past->deleted</li>
    <li>destroyed_past->end</li>
    <li>destroyed_present->bankruptcy</li>
    <li>destroyed_present->crushed</li>
    <li>destroyed_present->the-</li>
    <li>destroyed_present->destroyed</li>
    <li>destroyed_present->fallow</li>
  </Maneuver_Smash_Damage.rulePack.rulesStrings>
  <!-- EN:
    <li>damaged_inf(p=4)->stab</li>
    <li>damaged_inf->jab</li>
    <li>damaged_inf(deflected!=True)->pierce</li>
    <li>damaged_inf(deflected!=True)->puncture</li>
    <li>damaged_inf(deflected!=True)->skewer</li>
    <li>damaged_past(p=4)->stabbed</li>
    <li>damaged_past->jabbed</li>
    <li>damaged_past(deflected!=True)->pierced</li>
    <li>damaged_past(deflected!=True)->punctured</li>
    <li>damaged_past(deflected!=True)->skewered</li>
    <li>damaged_present(deflected!=True)->piercing</li>
    <li>damaged_present(deflected!=True)->puncturing</li>
    <li>damaged_present(deflected!=True)->penetrating</li>
    <li>damaged_present(deflected!=True)->skewering</li>
    <li>woundname->hole</li>
    <li>woundname->wound</li>
    <li>woundname->crevice</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a torn [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>
    <li>destroyed_past->impaled</li>
    <li>destroyed_past->perforated</li>
    <li>destroyed_past->skewered</li>
    <li>destroyed_present->impaling</li>
    <li>destroyed_present->perforating</li>
    <li>destroyed_present->skewering</li>
    <li>destroyed_suffix->straight through</li>
    <li>destroyed_suffix->leaving a clean hole</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
  -->
  <Maneuver_Stab.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->circular</li>
    <li>damaged_inf->pay</li>
    <li>damaged_inf(deflected!=True)->window</li>
    <li>damaged_inf(deflected!=True)->check it out</li>
    <li>damaged_inf(deflected!=True)->galela</li>
    <li>damaged_past(p=4)->after a while</li>
    <li>damaged_past->click</li>
    <li>damaged_past(deflected!=True)->injured</li>
    <li>damaged_past(deflected!=True)->pierced</li>
    <li>damaged_past(deflected!=True)->idea</li>
    <li>damaged_present(deflected!=True)->perforated</li>
    <li>damaged_present(deflected!=True)->perforated</li>
    <li>damaged_present(deflected!=True)->permeated</li>
    <li>damaged_present(deflected!=True)->outrage</li>
    <li>woundname->Data</li>
    <li>woundname->Lai</li>
    <li>woundname->Column</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->blood left [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->[woundname] leaves, torn</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaves behind [woundname] bleeding</li>
    <li>destroyed_past->carpet</li>
    <li>destroyed_past->door</li>
    <li>destroyed_past->miniatures</li>
    <li>destroyed_present->what</li>
    <li>destroyed_present->ruptured</li>
    <li>destroyed_present->country</li>
    <li>destroyed_suffix->line</li>
    <li>destroyed_suffix->Pure holiday early</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->The leaves are fluid leaks</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->Filed unique changes and exiting the</li>
  </Maneuver_Stab.rulePack.rulesStrings>
</LanguageData>
